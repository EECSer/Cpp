// MatCov2.0.cpp: 定义控制台应用程序的入口点。
//

#include "stdafx.h"


int main()
{
	const int row1 = 4;
	const int col1 = 5;

	const int row2 = 3;
	const int col2 = 3;
	int a[row1*col1] = { 1,2,4,5,6,6,8,9,1,3,6,8,9,2,4,7,3,5,7,5 };
	int b[row2*col2] = { 1,2,3,3,4,5,6,7,8 };
	int *c = new int[row1*col1]();
	c = conv2(a, b, 4, 5, 3, 3);
	for (int i = 0;i < row1;++i)
	{
		for (int j = 0;j < col1;++j)
		{
			cout.width(7);
			cout << c[i*col1 + j];
		}
		cout << endl;
	}

	system("pause");
    return 0;
}

int * conv2(int * pInput, int * kernal, int row1, int col1, int row2, int col2)
{
	//same版本
	const int row = row1 + row2 - 1;
	const int col = col1 + col2 - 1;
	int* paddedZeroMat = new int[row*col]();
	//将被卷矩阵补零
	for (int i = 0;i < row1;++i)
	{
		for (int j = 0;j < col1;++j)
		{
			paddedZeroMat[(i + (row - row1) / 2)*col + j + (col - col1) / 2] = pInput[i*col1 + j];
		}
	}
	//将卷积核旋转180°
	kernal = rot90(rot90(kernal, row2, col2), col2, row2);
	for (int i = 0;i < row1;++i)
	{
		//核心的位置
		for (int j = 0;j < col1;++j)
		{
			pInput[i*col1 + j] = 0;
			for (int m = 0;m < row2;++m)
			{
				//卷积核与被卷矩阵重叠部分
				for (int n = 0;n < col2;++n)
				{
					pInput[i*col1 + j] += paddedZeroMat[(i + m)*col + j + n] * kernal[m*col2 + n];
				}
			}
		}
	}
	return pInput;
}

int* rot90(int* A, int row, int col)
{
	/*
		将矩阵逆时针旋转90°
	*/
	int* rotA = new int[row*col]();
	for (int i = 0;i < row;++i)
	{
		for (int j = 0;j < col;++j)
		{
			rotA[(col - j - 1)*col + i] = A[i*col + j];
		}
	}
	return rotA;
}